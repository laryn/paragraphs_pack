<?php

/**
 * @file
 * Paragraphs pack content list module's tests.
 */

/**
 * Class ClassyParagraphsTestBase
 *
 * Base test class used for all functional test.
 */
class ParagraphsPackNodeListTestBase extends DrupalWebTestCase {

  /**
   * Helper method used to create node with paragraphs.
   *
   * @param string $view_mode
   * @param string $node_type
   * @return array
   */
  public function createNodeWithParagraph($view_mode = 'teaser', $node_type = 'pp_test_landing_page') {
    $target_type = 'node';

    $node = $this->drupalCreateNode(array('type' => $node_type));

    $field_view_mode = PP_FIELD_VIEW_MODE;
    $field_items = PP_FIELD_ITEMS . '_' . $target_type;

    $entity = entity_create('paragraphs_item', array('bundle' => PP_BUNDLE_NODE_LIST, 'field_name' => 'field_pp_test_paragraphs'));
    $entity->{$field_view_mode}[LANGUAGE_NONE][0]['value'] = $view_mode;
    // Fill entityreference field with content of Basic page.
    //$entity->{$field_items}[LANGUAGE_NONE][0]['value'] = $this->randomString();
    $entity->setHostEntity('node', $node);
    $entity->save();

    return array($node, $entity);
  }

}

/**
 * class ParagraphsPackNodeListTestCase
 *
 * Test case for Paragraphs pack content list.
 */
class ParagraphsPackNodeListTestCase extends DrupalWebTestCase {

  /**
   * Give display information to the SimpleTest system.
   *
   * getInfo() returns a keyed array of information for SimpleTest to show.
   *
   * It's a good idea to organize your tests consistently using the 'group'
   * key.
   */
  public static function getInfo() {
    return array(
      'name' => 'Paragraphs pack content list tests',
      'description' => 'Tests:  Paragraphs pack content list installation.',
      'group' => 'Paragraphs pack',
    );
  }

  /**
   * Set up the test environment.
   */
  public function setUp() {
    // We call parent::setUp() with the list of modules we want to enable.
    parent::setUp('paragraphs_pack_node_list');
  }

  /**
   * Test Paragraph Content bundle existence.
   */
  public function testParagraphsPackNodeListBundle() {
    // Test bundle existence.
    $content_bundle_loaded = (paragraphs_bundle_load(PP_BUNDLE_NODE_LIST) != FALSE);
    $this->assertTrue($content_bundle_loaded, t('Paragraph "@paragraph_bundle" bundle was successfully created.', array(
      '@paragraph_bundle' => PP_BUNDLE_NODE_LIST,
    )));

    // TODO:
    // Assing paragraph_item to Basic page bundle.
    // Create Basic page node: $this->drupalCreateNode($settings)
    // Load the page for adding new Basic page: $this->drupalGet($path)
    // Select paragraph bundle (probably not necessary, just one paragraph bundle will be available)
    // Click Add Paragraph button: $this->drupalPostAJAX($path, $edit, $triggering_element)
    // Get viem mode field options: $this->getAllOptions($element)
    // Check the options.
    // Maybe:
    // Create some nodes, Basic page bundles.
    // Create PP_BUNDLE_NODE_LIST instance.
  }

  /**
   * Test items field and instance existance.
   */
  public function testParagraphsPackNodeListFieldItemsExistence() {
    $field_name = PP_FIELD_ITEMS . '_node';

    $field = field_info_field($field_name);
    $this->assertTrue(!empty($field), t('Field "@paragraph_field" exists.', array(
      '@paragraph_field' => $field_name,
    )));

    $instance = field_info_instance(PP_PARAGRAPH_TYPE, $field_name, PP_BUNDLE_NODE_LIST);
    $this->assertTrue(!empty($instance), t('Paragraph "@paragraph_bundle" bundle contains "@paragraph_field" field instance.', array(
      '@paragraph_bundle' => PP_BUNDLE_NODE_LIST,
      '@paragraph_field' => $field_name,
    )));
  }

  /**
   * Test view mode field and instance existance.
   */
  public function testParagraphsPackNodeListFieldViewModeExistence() {
    $field = field_info_field(PP_FIELD_VIEW_MODE);
    $this->assertTrue(!empty($field), t('Field "@paragraph_field" exists.', array(
      '@paragraph_field' => PP_FIELD_VIEW_MODE,
    )));

    $instance = field_info_instance(PP_PARAGRAPH_TYPE, PP_FIELD_VIEW_MODE, PP_BUNDLE_NODE_LIST);
    $this->assertTrue(!empty($instance), t('Paragraph "@paragraph_bundle" bundle contains "@paragraph_field" field instance.', array(
      '@paragraph_bundle' => PP_BUNDLE_NODE_LIST,
      '@paragraph_field' => PP_FIELD_VIEW_MODE,
    )));
  }

}

/**
 * Class ParagraphsPackNodeListTestFeatureCase
 *
 * Ensure that the test features has been installed.
 */
class ParagraphsPackNodeListTestFeatureCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Test Paragraphs pack testing feature module',
      'description' => 'Ensure that the Paragraphs pack testing feature installs.',
      'group' => 'Paragraphs pack',
    );
  }

  public function setUp() {
    parent::setUp('paragraphs_pack_test');
    // Log user in.
    $web_user = $this->drupalCreateUser(array('bypass node access', 'administer content types', 'administer paragraphs bundles'));
    $this->drupalLogin($web_user);
  }

  /**
   * Test content type stored in features.
   */
  public function testParagraphsPackNodeListNodeType() {
    $node_types = node_type_get_types();
    $this->assertTrue(isset($node_types['pp_test_landing_page']), 'Node type landing page is available.');
    // Go to test content type.
    $this->drupalGet('node/add/pp-test-landing-page');
    $this->assertText('Paragraphs', 'Found paragraphs field');
  }

}

/**
 * Class ClassyParagraphsTestCase
 *
 * Ensure that the markup appears.
 */
class ParagraphsPackNodeListTestViewModeCase extends ParagraphsPackNodeListTestBase {

  public static function getInfo() {
    return array(
      'name' => 'Test view mode on node list paragraph',
      'description' => 'Ensure that the view mode works correctly on node list paragraph.',
      'group' => 'Paragraphs pack',
    );
  }

  public function setUp() {
    parent::setUp('paragraphs_pack_test');
  }

  /**
   * Test view mode options.
   */
  public function testParagraphsPackNodeListViewModeOptions() {
//    $css_class = 'test-soft-value';
//    list ($node, $entity) = $this->createNodeWithParagraph($css_class);
//    $this->drupalGet('node/' . $node->nid);
//    $class = $this->xpath('//*[contains(@class, "' . $css_class . '")]');
//    $this->assertTrue(count($class) == 1, $css_class . ' class found.');
  }

}
